

vec2 brownConradyDistortion(vec2 uv)
{
    // positive values of K1 give barrel distortion, negative give pincushion
    float barrelDistortion1 = -iMouse.x / 100.0; // K1 in text books
    float barrelDistortion2 = 0.0; // K2 in text books
    float r2 = uv.x*uv.x + uv.y*uv.y;
    uv *= 1.0 + barrelDistortion1 * r2 + barrelDistortion2 * r2 * r2;
    
    // tangential distortion (due to off center lens elements)
    // is not modeled in this function, but if it was, the terms would go here
    return uv;
}


// some shaders implement barrel distortion like this, but it's more expensive
// by far
vec2 easyBarrelDistortion(vec2 uv)
{
    float demoScale = 1.1;
    uv *= demoScale;
    float th = atan(uv.x, uv.y);
    float barrelDistortion = 1.2;
    float r = pow(sqrt(uv.x*uv.x + uv.y*uv.y), barrelDistortion);
    uv.x = r * sin(th);
    uv.y = r * cos(th);
    return uv;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
  vec2 uv = fragCoord / iResolution.xy;
    uv = uv * 2.0 - 1.0;

    uv = brownConradyDistortion(uv);

    uv = 0.5 * (uv * 0.5 + 1.0);
    
  fragColor = texture(iChannel0, uv);
}
